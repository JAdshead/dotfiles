#!/bin/sh

cat <<EOT >Gemfile
ruby '1.9.2'

source 'https://rubygems.org'
gem "racksh"
gem "sinatra"
gem "thin"
gem "mongo"
gem "bson_ext"
gem "rack-gridfs"
gem "rack-cerberus"
gem "rack-backend-api"
gem "populate-me"

EOT

if $WITH_BUREAU; then
cat <<EOT >>Gemfile
source "https://xxxxxxxxxx:xxxxxxxx@xxgems.heroku.com"
gem "campbellhay-bureau"

EOT
fi

cat <<EOT >config.ru
Encoding.default_internal = Encoding.default_external = Encoding::UTF_8

require "rubygems"
require "bundler/setup"

APP_ROOT = ::File.expand_path(::File.dirname(__FILE__))
$:.unshift APP_ROOT
$:.unshift APP_ROOT+'/lib'

require "cerberus"
require "backend_api"
require "rack/gridfs"
require "db"
require "main"
require "admin"

use ::Rack::GridFS, :db=>DB

use Rack::Session::Cookie#, {:key => '${PWD##*/}.session', :secret => 'changeme'}

map '/' do
  run Main
end

map '/admin' do
  unless ENV['CERBERUS_PASS'].nil?
    use Cerberus, {:company_name => '${PWD##*/}'} do |login,pass|
      pass==ENV['CERBERUS_PASS']
    end
  end
  use Admin
  run BackendAPI.new
end
EOT

mkdir -p lib/collections
cat <<EOT >lib/db.rb
require 'mongo'
require 'uri'

if ENV['MONGOLAB_URI']
  uri  = URI.parse(ENV['MONGOLAB_URI'])
  MONGO = Mongo::MongoClient.from_uri(ENV['MONGOLAB_URI'])
  DB   = MONGO.db(uri.path.gsub(/^\//, ''))
else
  MONGO = Mongo::MongoClient.new
  DB  = MONGO['${PWD##*/}-dev']
end

GRID = Mongo::Grid.new(DB)

require 'populate_me/mongo'
require 'mongo_bureau'

# Load collections here

EOT
cat << "EOT" >main.rb
require 'sinatra/base'

class Main < Sinatra::Base
  
  get '/' do
    erb :index
  end

  not_found do
    erb :'404'
  end
  
  error do
    @msg = env['sinatra.error'].message
    erb :'500'
  end  

  helpers do
    
    def h(text)
      Rack::Utils.escape_html(text)
    end

    def u(text)
      Rack::Utils.escape(text)
    end

    def nl2br(string, xhtml = true)
      br = xhtml ? '<br />' : '<br>'
      string.to_s.gsub(/\n/, br)
    end
    
    def superformat(s)
      replaced = s.to_s.
      gsub(/\b((https?:\/\/|ftps?:\/\/|www\.)([A-Za-z0-9\-_=%&@\?\.\/]+))\b/) do |str|
        url = $2=="www." ? "http://#{$1}" : $1
        "<a href='#{url}' target='_blank'>#{$1}</a>"
      end.
      gsub(/([^\s]+@[^\s]*[a-zA-Z])/) do |str|
        "<a href='mailto:#{$1.downcase}'>#{$1}</a>"
      end
      nl2br(replaced).gsub("@", "&#64;")
    end

    def search_selector(q_string, *fields)
      q_list = q_string.to_s.scan(/\w+/)
      return {'z'=>0} if q_list.empty?
      selector = {'$and'=>[]}
      q_list.each do |q|
        sub_selector = {'$or'=>[]}
        fields.each do |f|
          sub_selector['$or'] << {f=>/#{q}/i}
        end
        selector['$and'] << sub_selector
      end
      selector = selector['$and'][0] if selector['$and'].size==1
      selector
    end

    def truncate(s,c=320)
      s.to_s.gsub(/<[^>]*>/, '').gsub(/\n/, ' ').sub(/^(.{#{c}}\w*).*$/m, '\1...')
    end
  end

end
EOT

cat <<EOT >admin.rb
require 'bureau'

class Admin
  include Bureau

  MENU = [[['Admin', '/admin']]]

  config.update({
    :index=>['welcome'],
    :menu=>MENU
  })

  def welcome
    @content = 'WELCOME TO THE BUREAU'
    _finish
  end

end
EOT

mkdir -p public/img
mkdir public/css
cat <<EOT >public/css/main.css
/* resets */

* { 
  -moz-box-sizing: border-box; 
  -ms-box-sizing: border-box; 
  box-sizing: border-box; 
}
img { border: 0px; }
ul,ol { list-style: none; margin: 0px; padding: 0px; }
article,aside,details,figcaption,figure,
footer,header,hgroup,menu,nav,section {
  display:block;
}

/* Show on rollover */

.show-on-rollover {
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  -moz-opacity: 0;
  -khtml-opacity: 0;
  opacity: 0;
  -webkit-transition: 0.25s;
  -moz-transition: 0.25s;
  -o-transition: 0.25s;
  transition: 0.25s;  
}
.show-on-rollover-parent:hover .show-on-rollover {
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=100)";
  -moz-opacity: 1;
  -khtml-opacity: 1;
  opacity: 1;
}

/* Global */

::selection { background: rgba(0,0,0,0.5); }
::-moz-selection { background: rgba(0,0,0,0.5); }

.float-container:after {
  visibility: hidden;
  display: block;
  font-size: 0;
  content: " ";
  clear: both;
  height: 0;
}

EOT

mkdir public/js
cat <<EOT >public/js/main.js
var is_touch_device = 'ontouchstart' in window || navigator.msMaxTouchPoints;

\$(function() {
  /* class for touch device */
  \$('html').addClass(is_touch_device ? 'touch' : 'no-touch');
});
EOT

mkdir views
cat <<EOT >views/layout.erb
<%# encoding: utf-8 %>
<!DOCTYPE html>
<html lang='en'>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!--[if lt IE 9]>
      <script src="http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js"></script>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <!-- <link rel="icon" type="image/png" href="/img/favicon.png"> -->
    <link rel="stylesheet" href="/css/main.css" type="text/css" media="screen">
    <title>${PWD##*/}</title>
  </head>
  <body>
    <nav>
      <ol id='menu'>
        <li><a href='/'>Homepage</a></li>
      </ol>
    </nav>
    <section id='content'><%= yield %></section>
    <!-- JS -->
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
    <script type="text/javascript" src="/js/main.js"></script>
  </body>
</html>
EOT
cat <<EOT >views/index.erb
<%# encoding: utf-8 %>
<h1>HOMEPAGE</h1>
EOT
cat <<EOT >views/404.erb
<%# encoding: utf-8  %>
<h1>NOT FOUND 404<br>
  Sorry but we cannot find the page you're looking for.</h1>

EOT
cat <<EOT >views/500.erb
<%# encoding: utf-8 %>
<h1>ERROR 500<br>
  Sorry there was an error.</h1>
<p><%= @msg %></p>

EOT

echo "Skeleton created in $PWD"

